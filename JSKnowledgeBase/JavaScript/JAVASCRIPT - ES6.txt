
========================
=================================
====================================
============================================================================
JavaScript and ES6  - aka ECMAscript 2015
===========

Compare Scopes of the var and let Keywords
If you are unfamiliar with let, check out this challenge about the difference between let and var.
When you declare a variable with the var keyword, it is declared globally, or locally if declared inside a function.
The let keyword behaves similarly, but with some extra features. When you declare a variable with the let 
keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression



==============================================
.The const declaration has many use cases in modern JavaScript.

Some developers prefer to assign
 all their variables using const
 by default, unless they know they 
will need to reassign the value. Only
 in that case, they use let.

However, it is important to
 understand that objects (including arrays
 and functions) assigned to a variable using
 const are still mutable. Using the const
 declaration only prevents reassignment of
 the variable identifier.
===

const s = [5, 7, 2];
function editInPlace() {
  // Only change code below this line
  s[0] = 2;
  s[1] = 5;
  s[2] = 7;
  console.log(s)
  // Only change code above this line
}
editInPlace();
// -- [ 2, 5, 7 ]


========================================================
-=====================================================
Prevent Object Mutation
As seen in the previous challenge, const declaration
 alone doesn't really protect your data from mutation.
 To ensure your data doesn't change, JavaScript provides 
a function Object.freeze to prevent data mutation.

Any attempt at changing the object will be rejected, with
 an error thrown if the script is running in strict mode.

let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);
obj.review = "bad";
obj.newProp = "Test";
console.log(obj); 
The obj.review and obj.newProp assignments will result in errors,
 because our editor runs in strict mode by default, and the console 
will display the value { name: "FreeCodeCamp", review: "Awesome" }.


example # 2 

function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // Only change code below this line
 
 Object.freeze(MATH_CONSTANTS)

  // Only change code above this line
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();================
=============================================
====================================================================
Arrow Functions  - 




==






/// the same arrow function but cool , make it  a const too. 

const magic = () => {
  return new Date();
};						// even though i have no FNK idea at this point what  - new - does .....   :/

// this is also interesting 
// the Date() function will show you 
// the current time and date as well 



==================================================================



===========================================================
===============================================

 - This is a preview of the much used 
concat() method , 

var myConcat = function(arr1, arr2) {
  return arr1.concat(arr2);
};

console.log(myConcat([1, 2], [3, 4, 5]));

//
//        - "Even digital bart knows about the
//            concat() method"
//   /\/\/\
//  __-^^   
//   |  7 |
//   |  O -0000000~~~~
//   |  3 |  
//    \__/
//
//  " Whoa dude ! , its not about a con artist cat? No , con-caten-ation" - joining two things together.  - Duuuuh. 
//
=======================================================================================================================

===================================================================
============================

......Back to ES6 ...... 
========================================
================================
=============================

====================================================================================================================

























