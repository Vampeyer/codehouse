Returning Boolean Values from Functions
You may recall from Comparison with the Equality Operator that all
 comparison operators return a boolean true or false value.

Sometimes people use an if/else statement to do a comparison, like this:
---------------

function isEqual(a, b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}
-------
But there's a better way to do this. Since === returns true or false, we can 
return the result of the comparison:
----
function isEqual(a, b) {
  return a === b;
}
==========================================================
Instead , when using comparison operators , the comparison can be 
configured within the return statement as such. 

function isLess(a, b) {
  // Only change code below this line
 return a < b ;
  // Only change code above this line
}
isLess(10, 15);
console.log(isLess(10,20))

============================================================


Exiting a function early with if condition and return statement 

// Setup
function abTest(a, b) {
  // Only change code below this line

  if (a < 0 || b < 0) {
    return undefined;
  }
  // Only change code above this line
  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}
abTest(2,2);
console.log(abTest(-1,5));
==========================================================
==========================================================
==========================================================
CARD COUNTING FUNCTION, IN SWITCH STATEMENTS  , increases or decreases the count variable , 
based on the previous entries. 
Returns the count count/bet variable and 
either hold or bet if the variable is positive , or above zero. 

as a switch statement. 
-----------------------------------------------------------------

var count = 0;

function cc(card) {
  switch(card) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 10:
    case "J":
    case "Q":
    case "K":
    case "A":
      count--;
      break;
  }

  var holdbet = 'Hold'
  if (count > 0) {
    holdbet = 'Bet'
  }

  return count + " " + holdbet;

}

cc(2); cc('K'); cc(10); cc('K'); cc('A');
console.log(cc(4))


=================================================================

CARD COUNTING FUNCTION , IN IF STATEMENTS 

let count = 0;
function cc(card) {
  // Only change code below this line
 if (card === 2 || card === 3 || card === 4 || card === 5 || card === 6) { 
console.log(count)

   count++
 }else if(card === 10 ||card ===  "J" || card ===  "Q" || card ===  "K" || card ===  "A"){ 
   count--
 }

var holdbet ="Hold";
if (count > 0){ 
  holdbet = "Bet";
}

  return count + " " + holdbet;
  // Only change code above this line
}

cc(2); cc(6); cc(2); cc(7); cc('A');
console.log(cc(9))

// the console log will now display the current and past card 
count along with an advisory of how to display wether or not to hold or bet 
// based on the expectation that a ten pointed card will occur next. 

===============================================================

=============================================================


==============================================================
-------------------Basic JavaScript Object  --------------------
------------

const myDog = {
  // Only change code below this line
  name: "Dixie", 
  legs: 4, 
  tails: 1, 
  friends:["me", "Y0u", "True good pet owners"]
  // Only change code above this line
};

console.log(myDog)
===============================================================
---------------------------------
========================================
==============================
JavaScript Algorithms and Data Structures
Basic JavaScript
Accessing Object Properties with Dot Notation
There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar 
to an array.

Dot notation is what you use when you know the name of the property you're trying to access ahead of time.

Here is a sample of using dot notation (.) to read an object's property: -------------------------------------

// Setup
const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

const hatValue = testObj.hat;     
const shirtValue = testObj.shirt;   

console.log(hatValue)
console.log(shirtValue)

// ballcap
// jersey








































