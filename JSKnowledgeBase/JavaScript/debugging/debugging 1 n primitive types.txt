Use typeof to Check the Type of a Variable
You can use typeof to check the data structure, or type, of a variable. 
This is useful in debugging when working with multiple data types.
 If you think you're adding two numbers, but one 
is actually a string, the results can be unexpected. 
Type errors can lurk in calculations or function calls.
 Be careful especially when you're accessing and working with external 
data in the form of a JavaScript Object Notation (JSON) object.

Here are some examples using typeof:

console.log(typeof "");
console.log(typeof 0);
console.log(typeof []);
console.log(typeof {});
In order, the console will display the strings string, number, object, and object.

JavaScript recognizes seven primitive (immutable)
 data types: Boolean, Null, Undefined, Number, String, Symbol (new with ES6),
 and BigInt (new with ES2020), and one type for mutable items: Object. 
Note that in JavaScript, arrays are technically a type of object.

================================================================
====================================


// Open your browser console.
let output = "Get this to show once in the freeCodeCamp console and not at all in the browser console";

// Use console.log() to print the output variable.
console.log(output);

// Use console.clear() to clear the browser console.
console.clear();

======================================================================================



=================================
===========================================================

let myArray = [1, 2, 3];
let arraySum = myArray.reduce((previous, current) =>  previous + current);
console.log(`Sum of array values is: ${arraySum}`);

=================================================================================
==============================================================



Prevent Infinite Loops with a Valid Terminal Condition
The final topic is the dreaded infinite loop. Loops are great tools when you need your 
program to run a code block a certain number of times or until a condition is met, but they
 need a terminal condition that ends the looping. Infinite loops are likely to freeze or
 crash the browser, and cause general program execution mayhem, which no one wants.

There was an example of an infinite loop in the introduction to this section - it had
 no terminal condition to break out of the while loop inside loopy(). Do NOT call this
 function!



function loopy(){ 
  while(true) {
    console.log("Infinite")
  }
}

loopy();

//

Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Infinite
Potential infinite loop detected on line 4. Tests may fail if this is not changed.


-=====================================================================================================

function myFunc() {
  for (let i = 1; i != 4; i += 2) {
    console.log("Still going!");
  }
}console.log(myFunc())


--------------

Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Still going!
Potential infinite loop detected on line 2. Tests may fail if this is not changed.
undefined

---------------

-- fixed loop solution ----- 

---- 
function myFunc() {
  for (let i = 1; i <= 4; i += 2) {              the comparison // middle opertor was
    console.log("Still going!");                   
   }
}console.log(myFunc())
=========================================================================================================




some important features are for debugging code. 

-----------------------
let yourArray = [1,2,3,4,5,]
console.log(yourArray.length)
-------------------------
// logs:      5 -------
-------------------------
====================================================================================================================
========================================================================================
==================================================================







